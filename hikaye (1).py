# -*- coding: utf-8 -*-
"""hikaye.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YlVVwXcBzizu49oQLWGOSGeDdlV1apJm
"""

from transformers import pipeline
import matplotlib.pyplot as plt
from PIL import Image,ImageDraw
from dotenv import load_dotenv
import os
from huggingface_hub import login

load_dotenv()
login(token=os.getenv("HF_TOKEN"))

from transformers import pipeline

detector = pipeline("object-detection", model="facebook/detr-resnet-50")

image_path = "1.jpg"  # Dosyanın gerçekten aynı klasörde ve sağlam olduğundan emin ol!
results = detector(image_path)

from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt

image = Image.open(image_path)
draw = ImageDraw.Draw(image)


try:
    font = ImageFont.truetype("arial.ttf", 28)
except:
    font = ImageFont.load_default()

for r in results:
    box = r["box"]
    label = r["label"]
    score = r["score"]

    draw.rectangle(
        [(box['xmin'], box['ymin']), (box['xmax'], box['ymax'])],
        outline='red',
        width=4
    )

    yazi_yeri = (box['xmin'] + 10, max(box['ymin'] - 30, 0))  # Kutunun biraz üstüne
    draw.text(
        yazi_yeri,
        f"{label} {score:.2f}",
        fill='yellow',
        font=font
    )

plt.figure(figsize=(10, 8))
plt.imshow(image)
plt.axis("off")
plt.show()

image_path="10.jpg"
results=detector(image_path)

image = Image.open(image_path)
draw = ImageDraw.Draw(image)


try:
    font = ImageFont.truetype("arial.ttf", 28)
except:
    font = ImageFont.load_default()

for r in results:
    box = r["box"]
    label = r["label"]
    score = r["score"]

    draw.rectangle(
        [(box['xmin'], box['ymin']), (box['xmax'], box['ymax'])],
        outline='red',
        width=4
    )

    yazi_yeri = (box['xmin'] + 10, max(box['ymin'] - 30, 0))
    draw.text(
        yazi_yeri,
        f"{label} {score:.2f}",
        fill='blue',
        font=font
    )

plt.figure(figsize=(10, 8))  # Görseli büyük aç
plt.imshow(image)
plt.axis("off")
plt.show()

detector = pipeline("object-detection", model="hustvl/yolos-tiny")
image_path="10.jpg"
results=detector(image_path)

image = Image.open(image_path)
draw = ImageDraw.Draw(image)


try:
    font = ImageFont.truetype("arial.ttf", 28)
except:
    font = ImageFont.load_default()

for r in results:
    box = r["box"]

    label = r["label"]#modelin verdiği nesne ismi(label)ve bu tahminin güven
    score = r["score"]
    # Kutu çizimi
    draw.rectangle(
        [(box['xmin'], box['ymin']), (box['xmax'], box['ymax'])],
        outline='red',
        width=4
    )

    yazi_yeri = (box['xmin'] + 10, max(box['ymin'] - 30, 0))
    draw.text(
        yazi_yeri,
        f"{label} {score:.2f}",
        fill='blue',
        font=font
    )

plt.figure(figsize=(10, 8))
plt.imshow(image)
plt.axis("off")
plt.show()

detected_labels=set()
for r in results:
    label=r["label"]
    detected_labels.add(label)
object_list=list(detected_labels)
print(object_list)

prompt_story = (
    "Can you write a short, creative story for children using these objects: book, cup, laptop? "
    "The story should have a clear beginning, middle, and end. Write the story in simple English."
)

from transformers import pipeline

llm = pipeline("text-generation", model="mistralai/Mistral-7B-Instruct-v0.3")
output = llm(prompt_story, max_new_tokens=300)[0]["generated_text"]
print(output)

